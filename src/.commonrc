# .commonrc
# An rc file that contains commands common to multiple shells
# (bash and zsh primarily). Other shells should source this
# file in their respective rc file.

# SHELL BASICS
# ----------

export PAGER=less

# set vim as the default editor
if command -v vim > /dev/null 2>&1; then
  unset EDITOR
  export EDITOR=$(which vim)
fi
if command -v nvim > /dev/null 2>&1; then
  unset EDITOR
  export EDITOR=$(which nvim)
fi

# add dotfiles bin to the path
# TODO this was disabled in commit 8a9ddcc but I don't know why
# there may be some machine-specific behaviour to account for
export PATH=$HOME/bin:$PATH

# add go bin to the path
export PATH=/usr/local/go/bin:$PATH

# add local bin to the path
export PATH=$HOME/.local/bin:$PATH

# add rust toolchain
[ -f "$HOME/.cargo/env" ] && source $HOME/.cargo/env


# add systemd user-binaries to the path
# if command -v systemd-path > /dev/null 2>&1; then
#   export PATH=$(systemd-path user-binaries):$PATH
# fi

# Add SSH keychain
eval $(keychain --eval --quiet id_ed25519 mini-universe.id_ed25519)

# set for gpg-agent to work correctly
export GPG_TTY=$(tty)

# EXPERIMENTAL: use kitty plugin to prevent terminal failures over SSH
# https://sw.kovidgoyal.net/kitty/faq/#i-get-errors-about-the-terminal-being-unknown-or-opening-the-terminal-failing-when-sshing-into-a-different-computer
if [ "$TERM" = "xterm-kitty" ]; then
  alias ssh="kitty +kitten ssh"
fi

#
# if ! ssh-add -l > /dev/null 2>&1; then
#   echo "WARNING: ssh-keys not configured correctly. Output of ssh-add -l:"
#   echo $(ssh-add -l)
# fi

# Use ripgrep for fzf
export FZF_DEFAULT_COMMAND="rg --files --hidden"
export FZF_CTRL_T_COMMAND=$FZF_DEFAULT_COMMAND
export FZF_DEFAULT_OPTS=""


# LANGUAGE-SPECIFIC SETTINGS
# ----------

# python
export PYTHONDONTWRITEBYTECODE=1
export PIP_DOWNLOAD_CACHE=$HOME/.pip/cache

# ALIASES
# ----------

# Enable aliases to be sudoâ€™ed
alias sudo='sudo '

alias g="git "

# Quickly cd to git repository root, or home directory if not in a git repo
cdg() {
  cd $(git rev-parse --show-toplevel 2> /dev/null)
}

# Vim shortcuts
if command -v nvim > /dev/null 2>&1; then
  alias v="nvim "
  alias vi="nvim "
else
  alias v="vim "
  alias vi="vim "
fi

# Copy to clipboard easily
alias copy="xclip -selection c"

# ls aliases
if ls --quoting-style=literal > /dev/null 2>&1; then # GNU
  lsparams="--color --quoting-style=literal"
else # OS X
  lsparams="-G"
fi

alias ls="ls ${lsparams} ${quoteparam}"
alias l="ls -A ${lsparams} ${quoteparam}"
alias ll="ls -AhCo ${lsparams} ${quoteparam}"

# Cleanup scripts
rm-temp-files() {
  find . -type f -name "*.DS_Store" -ls -delete
  find . -type f -name "*.py[co]" -ls -delete
  find . -type d -name "__pycache__" -ls -delete
  find . -type f -name "*.orig" -ls -delete
}
alias clearhistory='cat /dev/null > ~/.zsh_history > ~/.psql_history > ~/.sh_history > ~/.bash_history'

alias ta="tmux a || tmux new -s 'default'"
alias tmux-attach="echo 'Use ta'; sleep 1; ta"

alias please='sudo $(fc -ln -1)'  # run last command with sudo
alias fuck=please  # ask nicely
alias fucking='sudo '

# Docker helpers
alias dc='docker-compose '
alias dce='docker-compose exec '

dps() {
  echo "Containers:"
  docker ps  --format="table {{ .ID }}\t{{ .Image }}\t{{ .Ports }}\t{{ .Status }}"
  echo "\nImages:"
  docker image ls --format='{{ .Repository }}:{{ .Tag }}' | sort | paste -s -d" "
}

# Kubernetes helpers
alias kubectl='minikube kubectl --'

# Terraform helpers
alias tf='terraform '
alias tfp='terraform plan'
alias tfa='terraform apply'

# Virtualenv helpers
alias mkdirvenv='rm -rf ./.venv && python3 -m venv .venv && ln -sf .venv/bin bin && bin/pip install --upgrade pip'
alias mktmpvenv='rm -rf /tmp/tmpenv && python3 -m venv /tmp/tmpenv && source /tmp/tmpenv/bin/activate && pip install --upgrade pip'

# Quickly create shell scripts
touch-sh() {
  if test -f $1; then
    echo "file already exists"
  else
    echo "#!/bin/sh\n" > $1 && chmod +x $1
  fi
}

# Activate common virtualenv dirs
venv-activate() {
  [ -d .venv ] && source .venv/bin/activate
  [ -d venv ] && source venv/bin/activate
  [ -d .virtualenv ] && source virtualenv/bin/activate
}

# tar shortcuts
# use `untar -C [directory]` to untar to a dir
alias untar="tar -zxvf"
# create a new tar file with `tarcreate [filename].tar.gz [item1] [item2] ...`
alias tarcreate="tar -czvf"

# HOOKS
# ----------

# hook for private content. intended to be either versioned into a different
# repository or encrypted with git-crypt.
[ -f $HOME/.commonrc.private ] && source $HOME/.commonrc.private

# hooks for machine-specific configuration.
[ -f $HOME/.machinerc.$(hostname -s) ] && source $HOME/.machinerc.$(hostname -s)

# github review stuff
export REVIEW_BASE=master


# COLOURS
# ----------

if [[ uname == "Darwin" ]] ; then
  export LSCOLORS=Cxcxcxdxbxagadabagacad # OSX
else
  export LS_COLORS=
fi

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/home/jeremy/downloads/google-cloud-sdk/path.zsh.inc' ]; then . '/home/jeremy/downloads/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/home/jeremy/downloads/google-cloud-sdk/completion.zsh.inc' ]; then . '/home/jeremy/downloads/google-cloud-sdk/completion.zsh.inc'; fi

# vim: filetype=sh
